Python = {
    'Add': (),
    'And': (),
    'Assert': ('test', 'msg'),
    'Assign': ('targets', 'value'),
    'Attribute': ('value', 'attr', 'ctx'),
    'AugAssign': ('target', 'op', 'value'),
    'AugLoad': (),
    'AugStore': (),
    'BinOp': ('left', 'op', 'right'),
    'BitAnd': (),
    'BitOr': (),
    'BitXor': (),
    'BoolOp': ('op', 'values'),
    'Break': (),
    'Call': ('func', 'args', 'keywords', 'starargs', 'kwargs'),
    'ClassDef': ('name', 'bases', 'body', 'decorator_list'),
    'Compare': ('left', 'ops', 'comparators'),
    'Continue': (),
    'Del': (),
    'Delete': ('targets',),
    'Dict': ('keys', 'values'),
    'DictComp': ('key', 'value', 'generators'),
    'Div': (),
    'Ellipsis': (),
    'Eq': (),
    'ExceptHandler': ('type', 'name', 'body'),
    'Exec': ('body', 'globals', 'locals'),
    'Expr': ('value',),
    'Expression': ('body',),
    'ExtSlice': ('dims',),
    'FloorDiv': (),
    'For': ('target', 'iter', 'body', 'orelse'),
    'FunctionDef': ('name', 'args', 'body', 'decorator_list'),
    'GeneratorExp': ('elt', 'generators'),
    'Global': ('names',),
    'Gt': (),
    'GtE': (),
    'If': ('test', 'body', 'orelse'),
    'IfExp': ('test', 'body', 'orelse'),
    'Import': ('names',),
    'ImportFrom': ('module', 'names', 'level'),
    'In': (),
    'Index': ('value',),
    'Interactive': ('body',),
    'Invert': (),
    'Is': (),
    'IsNot': (),
    'LShift': (),
    'Lambda': ('args', 'body'),
    'List': ('elts', 'ctx'),
    'ListComp': ('elt', 'generators'),
    'Load': (),
    'Lt': (),
    'LtE': (),
    'Mod': (),
    'Module': ('body',),
    'Mult': (),
    'Name': ('id', 'ctx'),
    'Not': (),
    'NotEq': (),
    'NotIn': (),
    'Num': ('n',),
    'Or': (),
    'Param': (),
    'Pass': (),
    'Pow': (),
    'Print': ('dest', 'values', 'nl'),
    'RShift': (),
    'Raise': ('type', 'inst', 'tback'),
    'Repr': ('value',),
    'Return': ('value',),
    'Set': ('elts',),
    'SetComp': ('elt', 'generators'),
    'Slice': ('lower', 'upper', 'step'),
    'Store': (),
    'Str': ('s',),
    'Sub': (),
    'Subscript': ('value', 'slice', 'ctx'),
    'Suite': ('body',),
    'TryExcept': ('body', 'handlers', 'orelse'),
    'TryFinally': ('body', 'finalbody'),
    'Tuple': ('elts', 'ctx'),
    'UAdd': (),
    'USub': (),
    'UnaryOp': ('op', 'operand'),
    'While': ('test', 'body', 'orelse'),
    'With': ('context_expr', 'optional_vars', 'body'),
    'Yield': ('value',),
}
